#!/usr/bin/env python

import argparse
import json 
import boto 
import re
import subprocess

class S3ObjStore:
    def __init__(self, bucket, path):
        self.c = boto.connect_s3()
        self.bucket = self.c.get_bucket(bucket)
        self.path = path

    def download(self, dir):
        if not os.path.exists(dir):
            os.makedirs(dir)
        prefix = "{}/{}".format(self.path, dir)
        files = self.bucket.list(prefix = prefix)
        for fn_key in files:
            fn = drop_prefix(self.path+"/", full_fn)
            fn_key.get_contents_to_file(os.path.join(dir, fn))

    def upload(self, dir):
        for fn in os.listdir(dir):
            full_fn = os.path.join(dir, fn)
            if os.path.is_file(full_fn):
                k = boto.Key("{}/{}/{}".format(self.path, dir, fn))
                k.set_contents_from_file(full_fn)


def run_command(obj_store, to_download, to_upload, command, results_file):
    for directory in to_download:
        obj_store.download(directory)
    
    retcode = subprocess.call(command)

    with open(results_file, "wt") as fd:
        fd.write(json.dumps(dict(retcode=retcode)))
    
    for directory in to_upload:
        obj_store.upload(directory)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("obj_store_url")
    parser.add_argument("--task", "-t")
    parser.add_argument("--download", "-d", action="append", default=[])
    parser.add_argument("--upload", "-u", action="append", default=[])
    parser.add_argument('command', nargs=argparse.REMAINDER)

    args = parser.parse_args()
    assert len(args.command) > 0

    m = re.match("([^:]+)://([^/]+)/(.*)", args.obj_store_url)
    assert m != None

    service, bucket, path = m.groups()
    assert service == "s3"
    obj_store = S3ObjStore(bucket, path)

    run_command(obj_store, args.download, args.upload, args.command, "retcode.json")

if __name__ == "__main__":
    main()
