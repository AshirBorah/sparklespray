#!/usr/bin/env python

import boto.ec2
import json
import sys

from base64 import b64encode

nomad_client_config = """
data_dir = "/nomad_datadir"

client {{
  enabled = true
  network_speed = 10
  servers = {server_addresses}
}}
"""

client_cloudinit_template = """#cloud-config
write_files:
- encoding: b64
  content: {nomad_conf_b64}
  path: /etc/nomad/client.conf
  permissions: '0554'
runcmd:
- [ start, nomad-client ]
final_message: "The system is finally up, after $UPTIME seconds"
"""

server_cloudinit = """#cloud-config
runcmd:
- [ start, nomad-server ]
final_message: "The system is finally up, after $UPTIME seconds"
"""

def make_client_cloudinit(nomad_server_addresses):
    conf = nomad_client_config.format(server_addresses=json.dumps(nomad_server_addresses))
    cloudinit = client_cloudinit_template.format(nomad_conf_b64=b64encode(conf.encode("utf-8")).decode("utf-8"))
    return cloudinit

def _start_client(c, ami_id, key_name, instance_type, security_group, nomad_server_addresses):
    cloudinit = make_client_cloudinit(nomad_server_addresses)
    r = c.run_instances(ami_id, key_name=key_name, instance_type=instance_type, security_group_ids=[security_group], user_data=cloudinit)
    assert len(r.instances) == 1
    instance = r.instances[0]
    c.create_tags([instance.id], dict(Name="nomad-client"))

def start_client(c, master_name, instance_type):
    instance = find_instance_by_name(c, master_name)
    _start_client(c, instance.image_id, instance.key_name, instance_type, instance.groups[0].id, [instance.private_ip_address])

def find_instance_by_name(c, name):
    instances = c.get_only_instances(filters={"tag:Name": name, "instance-state-name": "running"})
    assert len(instances) == 1
    return instances[0]

def find_ami_by_name(c, name):
    amis = c.get_all_images(filters=dict(name=name))
    assert len(amis) == 1
    return amis[0]

def start_server(c, ami_id, key_name, instance_type, security_group_id, master_name):
    r = c.run_instances(ami_id, key_name=key_name, instance_type=instance_type, security_group_ids=[security_group_id], user_data=server_cloudinit)
    assert len(r.instances) == 1
    instance = r.instances[0]
    c.create_tags([instance.id], dict(Name=master_name))

def main():
    cmd = sys.argv[1]
    if cmd == 'server':
      ami_name = sys.argv[2]
      key_name = sys.argv[3]
      security_group_id = sys.argv[4]
      master_name = sys.argv[5]
      instance_type = sys.argv[6]

      c = boto.ec2.connect_to_region("us-east-1")
      ami_id = find_ami_by_name(c,ami_name).id
      start_server(c, ami_id, key_name, instance_type, security_group_id, master_name)

    elif cmd == 'client':
      master_name = sys.argv[2]
      instance_type = sys.argv[3]
      c = boto.ec2.connect_to_region("us-east-1")
      start_client(c, master_name, instance_type)

if __name__ == "__main__":
    main()
